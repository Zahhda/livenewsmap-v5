version: '3.8'

services:
  # MongoDB Replica Set
  mongo-primary:
    image: mongo:7.0
    container_name: mongo-primary
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: messaging
    volumes:
      - mongo_primary_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    command: mongod --replSet rs0 --bind_ip_all
    networks:
      - messaging-network

  mongo-secondary:
    image: mongo:7.0
    container_name: mongo-secondary
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
    volumes:
      - mongo_secondary_data:/data/db
    command: mongod --replSet rs0 --bind_ip_all
    depends_on:
      - mongo-primary
    networks:
      - messaging-network

  # Redis
  redis:
    image: redis:7.2-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass redis123
    networks:
      - messaging-network

  # Socket.IO Server
  socket-server:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: socket-server
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      NODE_ENV: development
      PORT: 8080
      MONGODB_URI: mongodb://admin:password123@mongo-primary:27017/messaging?authSource=admin&replicaSet=rs0
      REDIS_URL: redis://:redis123@redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      CLIENT_URL: http://localhost:3000
    depends_on:
      - mongo-primary
      - redis
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - messaging-network

  # Background Worker
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: messaging-worker
    restart: unless-stopped
    environment:
      NODE_ENV: development
      MONGODB_URI: mongodb://admin:password123@mongo-primary:27017/messaging?authSource=admin&replicaSet=rs0
      REDIS_URL: redis://:redis123@redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      AWS_ACCESS_KEY_ID: your-aws-access-key
      AWS_SECRET_ACCESS_KEY: your-aws-secret-key
      AWS_S3_BUCKET: your-s3-bucket
    depends_on:
      - mongo-primary
      - redis
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: npm run worker
    networks:
      - messaging-network

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: messaging-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_SOCKET_URL: http://localhost:8080
      NEXT_PUBLIC_API_URL: http://localhost:8080/api
    depends_on:
      - socket-server
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - messaging-network

  # Nginx Load Balancer (for production)
  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - socket-server
    networks:
      - messaging-network

volumes:
  mongo_primary_data:
  mongo_secondary_data:
  redis_data:

networks:
  messaging-network:
    driver: bridge
